name: XML Viewer Auto-Optimizer
on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:
  push:
    paths: ['CALS_EC/**']

jobs:
  optimize:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm i -g terser html-minifier-terser
        npm i jsdom
        mkdir -p optimized
        
    - name: Analyze & Split JS
      run: |
        cat > split.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        
        const srcPath = './CALS_EC/script.js';
        const outDir = './optimized';
        
        if (!fs.existsSync(srcPath)) {
          console.log('Source script not found');
          process.exit(0);
        }
        
        const content = fs.readFileSync(srcPath, 'utf8');
        const lines = content.split('\n');
        
        let modules = {
          'xml-parser.js': [],
          'table-renderer.js': [],
          'ui-controller.js': [],
          'utils.js': [],
          'main.js': []
        };
        
        let currentModule = 'main.js';
        
        lines.forEach(line => {
          if (line.includes('XMLParser') || line.includes('parseXML')) {
            currentModule = 'xml-parser.js';
          } else if (line.includes('Table') || line.includes('CALS') || line.includes('render')) {
            currentModule = 'table-renderer.js';
          } else if (line.includes('UI') || line.includes('click') || line.includes('event')) {
            currentModule = 'ui-controller.js';
          } else if (line.includes('function') && !line.includes('main')) {
            currentModule = 'utils.js';
          }
          
          modules[currentModule].push(line);
        });
        
        Object.entries(modules).forEach(([file, content]) => {
          if (content.length > 0) {
            fs.writeFileSync(path.join(outDir, file), content.join('\n'));
          }
        });
        
        console.log('JS modules split completed');
        EOF
        
        node split.js
        
    - name: Create Optimized XML Parser
      run: |
        cat > optimized/xml-parser.js << 'EOF'
        class XMLParser {
          constructor() {
            this.cache = new Map();
            this.maxCache = 50;
          }
          
          parse(xml) {
            const key = xml.length + xml.charCodeAt(0);
            if (this.cache.has(key)) return this.cache.get(key);
            
            const doc = new DOMParser().parseFromString(xml, 'text/xml');
            if (this.cache.size >= this.maxCache) this.cache.clear();
            this.cache.set(key, doc);
            return doc;
          }
          
          getCALS(doc) {
            const tgroups = doc.querySelectorAll('tgroup');
            const tables = doc.querySelectorAll('table');
            const result = [];
            
            [...tgroups, ...tables].forEach(node => {
              const rows = node.querySelectorAll('row');
              if (rows.length === 0) return;
              
              result.push({
                cols: +(node.getAttribute('cols') || this.getCols(node)),
                rows: [...rows].map(row => [...row.querySelectorAll('entry')].map(entry => ({
                  text: entry.textContent,
                  colname: entry.getAttribute('colname'),
                  namest: entry.getAttribute('namest'),
                  nameend: entry.getAttribute('nameend'),
                  morerows: +(entry.getAttribute('morerows') || 0)
                })))
              });
            });
            
            return result;
          }
          
          getCols(node) {
            return node.querySelectorAll('colspec').length || 1;
          }
        }
        
        window.XMLParser = XMLParser;
        EOF
        
    - name: Create Optimized Table Renderer
      run: |
        cat > optimized/table-renderer.js << 'EOF'
        class TableRenderer {
          render(tables, container) {
            container.innerHTML = tables.map(this.createTable).join('');
          }
          
          createTable(table) {
            return `<table class="cals-table"><tbody>${table.rows.map(row => 
              `<tr>${row.map(cell => {
                const colspan = cell.namest && cell.nameend ? this.getColspan(cell.namest, cell.nameend) : 1;
                const rowspan = cell.morerows > 0 ? cell.morerows + 1 : 1;
                return `<td${colspan > 1 ? ` colspan="${colspan}"` : ''}${rowspan > 1 ? ` rowspan="${rowspan}"` : ''}>${cell.text}</td>`;
              }).join('')}</tr>`
            ).join('')}</tbody></table>`;
          }
          
          getColspan(namest, nameend) {
            const start = +(namest.match(/\d+/)?.[0] || 1);
            const end = +(nameend.match(/\d+/)?.[0] || 1);
            return Math.max(1, end - start + 1);
          }
        }
        
        window.TableRenderer = TableRenderer;
        EOF
        
    - name: Create Optimized UI Controller
      run: |
        cat > optimized/ui-controller.js << 'EOF'
        class UIController {
          constructor() {
            this.parser = new XMLParser();
            this.renderer = new TableRenderer();
            this.init();
          }
          
          init() {
            const input = document.getElementById('fileInput');
            const container = document.getElementById('xmlContainer');
            
            input?.addEventListener('change', e => this.handleFile(e.target.files[0]));
            
            document.addEventListener('dragover', e => {
              e.preventDefault();
              e.dataTransfer.dropEffect = 'copy';
            });
            
            document.addEventListener('drop', e => {
              e.preventDefault();
              this.handleFile(e.dataTransfer.files[0]);
            });
            
            document.querySelector('.upload-area')?.addEventListener('click', () => input?.click());
          }
          
          handleFile(file) {
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = e => {
              try {
                const doc = this.parser.parse(e.target.result);
                const tables = this.parser.getCALS(doc);
                const container = document.getElementById('xmlContainer');
                
                if (tables.length > 0) {
                  this.renderer.render(tables, container);
                } else {
                  container.innerHTML = '<div class="error">No CALS tables found</div>';
                }
              } catch (err) {
                document.getElementById('xmlContainer').innerHTML = `<div class="error">Error: ${err.message}</div>`;
              }
            };
            reader.readAsText(file);
          }
        }
        
        window.UIController = UIController;
        EOF
        
    - name: Create Optimized Utils
      run: |
        cat > optimized/utils.js << 'EOF'
        const Utils = {
          debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
              const later = () => {
                clearTimeout(timeout);
                func(...args);
              };
              clearTimeout(timeout);
              timeout = setTimeout(later, wait);
            };
          },
          
          throttle(func, limit) {
            let lastFunc;
            let lastRan;
            return function(...args) {
              if (!lastRan) {
                func(...args);
                lastRan = Date.now();
              } else {
                clearTimeout(lastFunc);
                lastFunc = setTimeout(() => {
                  if ((Date.now() - lastRan) >= limit) {
                    func(...args);
                    lastRan = Date.now();
                  }
                }, limit - (Date.now() - lastRan));
              }
            };
          },
          
          formatXML(xml) {
            const PADDING = ' '.repeat(2);
            const reg = /(>)(<)(\/*)/g;
            let formatted = xml.replace(reg, '$1\r\n$2$3');
            
            let pad = 0;
            return formatted.split('\r\n').map(line => {
              let indent = 0;
              if (line.match(/.+<\/\w[^>]*>$/)) {
                indent = 0;
              } else if (line.match(/^<\/\w/)) {
                if (pad !== 0) {
                  pad -= 1;
                }
              } else if (line.match(/^<\w[^>]*[^\/]>.*$/)) {
                indent = 1;
              } else {
                indent = 0;
              }
              
              const padding = PADDING.repeat(pad);
              pad += indent;
              
              return padding + line;
            }).join('\r\n');
          },
          
          validateXML(xmlString) {
            try {
              const parser = new DOMParser();
              const doc = parser.parseFromString(xmlString, 'text/xml');
              const parseError = doc.querySelector('parsererror');
              
              if (parseError) {
                throw new Error(parseError.textContent);
              }
              
              return { valid: true, error: null };
            } catch (error) {
              return { valid: false, error: error.message };
            }
          }
        };
        
        window.Utils = Utils;
        EOF
        
    - name: Create Optimized Main
      run: |
        cat > optimized/main.js << 'EOF'
        document.addEventListener('DOMContentLoaded', () => {
          const app = new UIController();
          console.log('XML Viewer initialized');
        });
        EOF
        
    - name: Create Optimized HTML
      run: |
        cat > optimized/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="ja">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>XML Viewer - CALS EC</title>
          <style>
            *{margin:0;padding:0;box-sizing:border-box}
            body{font-family:Arial,sans-serif;background:#f5f5f5}
            .container{max-width:1200px;margin:0 auto;padding:20px}
            .upload-area{border:2px dashed #ccc;padding:40px;text-align:center;margin:20px 0;background:#fff;border-radius:8px}
            .upload-area:hover{border-color:#007bff}
            .cals-table{width:100%;border-collapse:collapse;margin:20px 0;background:#fff}
            .cals-table td{border:1px solid #ddd;padding:8px;text-align:left}
            .cals-table tr:nth-child(even){background:#f9f9f9}
            .error{color:#d32f2f;background:#ffebee;padding:10px;border-radius:4px;margin:10px 0}
            .loading{text-align:center;padding:20px;color:#666}
            @media (max-width:768px){
              .container{padding:10px}
              .cals-table{font-size:14px}
              .cals-table td{padding:4px}
            }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>XML Viewer - CALS EC</h1>
            <div class="upload-area">
              <input type="file" id="fileInput" accept=".xml" style="display:none">
              <p>XMLファイルをドロップまたはクリックして選択</p>
            </div>
            <div id="xmlContainer"></div>
          </div>
          
          <script src="xml-parser.js"></script>
          <script src="table-renderer.js"></script>
          <script src="ui-controller.js"></script>
          <script src="utils.js"></script>
          <script src="main.js"></script>
        </body>
        </html>
        EOF
        
    - name: Minify Files
      run: |
        cd optimized
        for file in *.js; do
          terser "$file" --compress --mangle -o "$file.min"
          mv "$file.min" "$file"
        done
        
        html-minifier-terser --collapse-whitespace --remove-comments --minify-css --minify-js index.html -o index.html
        
    - name: Performance Test
      run: |
        npm i jsdom
        cat > test-performance.js << 'EOF'
        const fs = require('fs');
        const { performance } = require('perf_hooks');
        const { JSDOM } = require('jsdom');
        
        const dom = new JSDOM('<!DOCTYPE html><html><body></body></html>');
        global.DOMParser = dom.window.DOMParser;
        
        const testXML = `<?xml version="1.0"?>
        <document>
          <table>
            <tgroup cols="3">
              <colspec colname="col1"/>
              <colspec colname="col2"/>
              <colspec colname="col3"/>
              <tbody>
                <row>
                  <entry>Cell 1</entry>
                  <entry>Cell 2</entry>
                  <entry>Cell 3</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </document>`;
        
        const iterations = 100;
        const start = performance.now();
        
        for (let i = 0; i < iterations; i++) {
          const parser = new DOMParser();
          const doc = parser.parseFromString(testXML, 'text/xml');
          const tables = doc.querySelectorAll('table, tgroup');
        }
        
        const end = performance.now();
        const avgTime = (end - start) / iterations;
        
        console.log(`Average parse time: ${avgTime.toFixed(2)}ms`);
        
        const fileStats = fs.statSync('./optimized/xml-parser.js');
        const totalSize = fs.readdirSync('./optimized').reduce((total, file) => {
          return total + fs.statSync(`./optimized/${file}`).size;
        }, 0);
        
        const stats = {
          timestamp: new Date().toISOString(),
          averageParseTime: avgTime,
          iterations,
          xmlParserSize: fileStats.size,
          totalOptimizedSize: totalSize,
          compressionRatio: Math.round((totalSize / 1024) * 100) / 100
        };
        
        fs.writeFileSync('./optimized/performance-stats.json', JSON.stringify(stats, null, 2));
        EOF
        
        node test-performance.js
        
    - name: Create Archive
      run: |
        cd optimized
        tar -czf ../optimized-$(date +%Y%m%d-%H%M%S).tar.gz .
        
    - name: Commit Changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [[ -n $(git status --porcelain) ]]; then
          git add optimized/
          git commit -m "Auto-optimize XML viewer - $(date +%Y-%m-%d\ %H:%M:%S)"
          git push
        fi
        
    - name: Clean Old Artifacts
      run: |
        find . -name "optimized-*.tar.gz" -mtime +30 -delete
        
    - name: Summary
      run: |
        echo "## Optimization Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Files optimized**: $(ls -la optimized/ | wc -l) files" >> $GITHUB_STEP_SUMMARY
        echo "- **Total size**: $(du -sh optimized/ | cut -f1)" >> $GITHUB_STEP_SUMMARY
        
        if [ -f optimized/performance-stats.json ]; then
          echo "- **Performance**: $(cat optimized/performance-stats.json | jq -r '.averageParseTime')ms avg parse time" >> $GITHUB_STEP_SUMMARY
          echo "- **Compression**: $(cat optimized/performance-stats.json | jq -r '.compressionRatio')KB total size" >> $GITHUB_STEP_SUMMARY
        fi