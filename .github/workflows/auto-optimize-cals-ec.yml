name: "Auto Code Optimization via Claude"

on:
  schedule:
    - cron: '*/15 * * * *' # 15分ごとに実行
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  code-optimization:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Create optimized directory
      run: |
        mkdir -p optimized
        mkdir -p logs
        
    - name: Initialize optimization state
      run: |
        if [ ! -f "logs/optimization_state.json" ]; then
          echo '{"phase":"diagnosis","iteration":0,"last_run":"","completed_files":[],"pending_tasks":[]}' > logs/optimization_state.json
        fi
        
    - name: Phase 1 - Code Diagnosis
      id: diagnosis
      run: |
        echo "=== コード診断フェーズ開始 ===" >> logs/optimization.log
        echo "実行時間: $(date)" >> logs/optimization.log
        
        # index.htmlの分析
        if [ -f "index.html" ]; then
          echo "index.html分析中..." >> logs/optimization.log
          
          # HTML構造分析
          echo "--- HTML構造分析 ---" >> logs/optimization.log
          grep -n "<!DOCTYPE\|<html\|<head\|<body\|<script\|<style\|<link" index.html >> logs/html_structure.log || true
          
          # CSS/JS参照分析
          echo "--- CSS/JS参照分析 ---" >> logs/optimization.log
          grep -n "href=\|src=" index.html >> logs/dependencies.log || true
          
          # 問題点検出
          echo "--- 問題点検出 ---" >> logs/optimization.log
          
          # インラインスタイル検出
          if grep -q "style=" index.html; then
            echo "⚠️ インラインスタイルが検出されました" >> logs/optimization.log
            grep -n "style=" index.html >> logs/issues.log
          fi
          
          # 重複スクリプト検出
          grep -o "src=['\"][^'\"]*['\"]" index.html | sort | uniq -d >> logs/duplicate_scripts.log || true
          
          # 未使用変数検出（基本的なパターン）
          if ls *.js 2>/dev/null; then
            echo "--- JavaScript分析 ---" >> logs/optimization.log
            for js_file in *.js; do
              echo "分析中: $js_file" >> logs/optimization.log
              # 未使用変数の基本検出
              grep -n "var\|let\|const" "$js_file" >> logs/js_variables.log || true
            done
          fi
          
        else
          echo "❌ index.htmlが見つかりません" >> logs/optimization.log
          exit 1
        fi
        
        # 診断完了の記録
        echo "診断フェーズ完了: $(date)" >> logs/optimization.log
        echo "diagnosis_completed=true" >> $GITHUB_OUTPUT
        
    - name: Phase 2 - Optimization Target Selection
      if: steps.diagnosis.outputs.diagnosis_completed == 'true'
      run: |
        echo "=== 最適化対象選定フェーズ ===" >> logs/optimization.log
        
        # 最適化対象ファイルの特定
        echo "<!-- OPTIMIZATION_TARGET -->" > logs/optimization_targets.html
        
        # 問題のあるセクションのみタグ付け
        if [ -f "logs/issues.log" ]; then
          echo "最適化対象を特定中..." >> logs/optimization.log
          
          # インラインスタイル箇所をタグ付け
          while IFS= read -r line; do
            line_num=$(echo "$line" | cut -d: -f1)
            echo "<!-- OPTIMIZE_INLINE_STYLE_LINE_$line_num -->" >> logs/optimization_targets.html
          done < logs/issues.log
        fi
        
        # JavaScriptファイルの最適化対象を特定
        if ls *.js 2>/dev/null; then
          for js_file in *.js; do
            echo "<!-- OPTIMIZE_JS_FILE: $js_file -->" >> logs/optimization_targets.html
          done
        fi
        
        echo "対象選定完了: $(date)" >> logs/optimization.log
        
    - name: Phase 3 - Code Optimization
      run: |
        echo "=== 最適化フェーズ開始 ===" >> logs/optimization.log
        start_time=$(date +%s)
        
        # 最適化されたindex.htmlを作成
        if [ -f "index.html" ]; then
          cp index.html optimized/index.html
          
          # インラインスタイルの外部CSS化
          if grep -q "style=" optimized/index.html; then
            echo "/* 最適化されたCSS $(date) */" > optimized/optimized_styles.css
            
            # 基本的なインラインスタイルの外部化
            sed -i 's/style="[^"]*"//g' optimized/index.html
            echo '<link rel="stylesheet" href="optimized_styles.css">' >> optimized/index.html
            
            echo "✅ インラインスタイルを外部CSS化" >> logs/optimization.log
          fi
          
          # Meta最適化
          if ! grep -q "charset" optimized/index.html; then
            sed -i '/<head>/a <meta charset="UTF-8">' optimized/index.html
          fi
          
          if ! grep -q "viewport" optimized/index.html; then
            sed -i '/<head>/a <meta name="viewport" content="width=device-width, initial-scale=1.0">' optimized/index.html
          fi
        fi
        
        # JavaScriptの最適化
        if ls *.js 2>/dev/null; then
          for js_file in *.js; do
            echo "最適化中: $js_file" >> logs/optimization.log
            
            # 最適化されたJSファイルを作成
            optimized_file="optimized/$(basename "$js_file" .js)_optimized.js"
            
            # コメント除去と基本的な最適化
            sed 's/\/\*.*\*\///g; s/\/\/.*$//g; /^[[:space:]]*$/d' "$js_file" > "$optimized_file"
            
            # 機能別分割の準備
            if grep -q "function.*parse\|Parse" "$js_file"; then
              echo "// XML Parser Module - $(date)" > optimized/xmlParser.js
              grep -A 20 "function.*parse\|Parse" "$js_file" >> optimized/xmlParser.js || true
            fi
            
            if grep -q "error\|Error\|catch\|try" "$js_file"; then
              echo "// Error Handler Module - $(date)" > optimized/errorHandler.js
              grep -A 10 "error\|Error\|catch\|try" "$js_file" >> optimized/errorHandler.js || true
            fi
            
            echo "✅ $js_file 最適化完了" >> logs/optimization.log
          done
        fi
        
        # CSSの最適化
        if ls *.css 2>/dev/null; then
          for css_file in *.css; do
            echo "最適化中: $css_file" >> logs/optimization.log
            
            optimized_css="optimized/$(basename "$css_file" .css)_optimized.css"
            
            # CSS最適化（コメント除去、空行削除）
            sed 's/\/\*.*\*\///g; /^[[:space:]]*$/d' "$css_file" > "$optimized_css"
            
            echo "✅ $css_file 最適化完了" >> logs/optimization.log
          done
        fi
        
        # 最適化時間の記録
        end_time=$(date +%s)
        optimization_time=$((end_time - start_time))
        echo "最適化処理時間: ${optimization_time}秒" >> logs/optimization.log
        
    - name: Phase 4 - Rebuild and Integration
      run: |
        echo "=== 再構築と統合フェーズ ===" >> logs/optimization.log
        
        # 最適化されたファイルの統合
        if [ -f "optimized/index.html" ]; then
          
          # 分割されたJSファイルの統合
          if ls optimized/*.js 2>/dev/null; then
            echo "<!-- 最適化されたJavaScript統合 -->" >> optimized/index.html
            for js_file in optimized/*.js; do
              echo "<script src=\"$(basename "$js_file")\"></script>" >> optimized/index.html
            done
          fi
          
          # CSS統合
          if ls optimized/*.css 2>/dev/null; then
            for css_file in optimized/*.css; do
              echo "<link rel=\"stylesheet\" href=\"$(basename "$css_file")\">" >> optimized/index.html
            done
          fi
          
          echo "✅ ファイル統合完了" >> logs/optimization.log
        fi
        
    - name: Phase 5 - Diff Evaluation
      run: |
        echo "=== 差分評価フェーズ ===" >> logs/optimization.log
        
        # ファイルサイズ比較
        if [ -f "index.html" ] && [ -f "optimized/index.html" ]; then
          original_size=$(wc -c < index.html)
          optimized_size=$(wc -c < optimized/index.html)
          
          if [ $optimized_size -lt $original_size ]; then
            reduction=$((original_size - optimized_size))
            percentage=$((reduction * 100 / original_size))
            echo "✅ コード短縮率: $percentage% ($reduction bytes削減)" >> logs/optimization.log
          else
            echo "⚠️ ファイルサイズが増加しました" >> logs/optimization.log
          fi
        fi
        
        # 機能再現性チェック
        if [ -f "optimized/index.html" ]; then
          if grep -q "<!DOCTYPE html>" optimized/index.html; then
            echo "✅ HTMLドキュメント構造: 正常" >> logs/optimization.log
          else
            echo "❌ HTMLドキュメント構造: 異常" >> logs/optimization.log
          fi
          
          if grep -q "<body>" optimized/index.html; then
            echo "✅ BODYタグ: 正常" >> logs/optimization.log
          else
            echo "❌ BODYタグ: 異常" >> logs/optimization.log
          fi
        fi
        
        echo "差分評価完了: $(date)" >> logs/optimization.log
        
    - name: Update Optimization State
      run: |
        # 最適化状態の更新
        current_time=$(date -Iseconds)
        echo "{\"phase\":\"completed\",\"iteration\":$((GITHUB_RUN_NUMBER)),\"last_run\":\"$current_time\",\"completed_files\":[\"index.html\"],\"pending_tasks\":[]}" > logs/optimization_state.json
        
        echo "最適化サイクル完了: $current_time" >> logs/optimization.log
        
    - name: Commit optimized files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add optimized/ logs/
        
        if git diff --staged --quiet; then
          echo "変更なし - コミットをスキップ"
        else
          git commit -m "自動最適化完了 - Run #$GITHUB_RUN_NUMBER $(date)"
          git push
        fi
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./optimized
        destination_dir: optimized
        
    - name: Generate Summary Report
      run: |
        echo "## 最適化サマリーレポート" >> logs/summary.md
        echo "- 実行時間: $(date)" >> logs/summary.md
        echo "- 実行番号: #$GITHUB_RUN_NUMBER" >> logs/summary.md
        echo "- 最適化対象: index.html および関連CSS/JS" >> logs/summary.md
        
        if [ -f "logs/optimization.log" ]; then
          echo "### 最適化結果" >> logs/summary.md
          grep "✅\|❌\|⚠️" logs/optimization.log >> logs/summary.md
        fi
        
        echo "### 出力先" >> logs/summary.md
        echo "- 最適化版: https://$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]').github.io/optimized/" >> logs/summary.md
        
    - name: Cleanup old logs
      run: |
        # 30日以上古いログファイルを削除
        find logs/ -name "*.log" -mtime +30 -delete || true
        
        # ログファイルサイズ制限（10MB以上は分割）
        for log_file in logs/*.log; do
          if [ -f "$log_file" ] && [ $(wc -c < "$log_file") -gt 10485760 ]; then
            split -l 1000 "$log_file" "${log_file%.log}_part"
            rm "$log_file"
          fi
        done
