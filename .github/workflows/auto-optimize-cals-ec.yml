name: CALS_EC Auto Optimization

on:
  schedule:
    - cron: '0 */15 * * *'  # Every 15 minutes
  workflow_dispatch:

jobs:
  optimize:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: npm install terser html-minifier-terser
    
    - name: Optimize with Claude
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        node -e "
        const fs=require('fs');
        const path=require('path');
        const https=require('https');
        const {minify}=require('terser');
        const {minify:htmlMinify}=require('html-minifier-terser');
        
        const API_KEY=process.env.ANTHROPIC_API_KEY;
        const srcDir='./tree/main/CALS_EC';
        const outDir='./optimized';
        
        if(!fs.existsSync(outDir))fs.mkdirSync(outDir,{recursive:true});
        
        const callClaude=async(prompt)=>{
          const data=JSON.stringify({
            model:'claude-sonnet-4-20250514',
            max_tokens:4000,
            messages:[{role:'user',content:prompt}]
          });
          
          return new Promise((resolve,reject)=>{
            const req=https.request({
              hostname:'api.anthropic.com',
              path:'/v1/messages',
              method:'POST',
              headers:{
                'Content-Type':'application/json',
                'Content-Length':data.length,
                'x-api-key':API_KEY,
                'anthropic-version':'2023-06-01'
              }
            },res=>{
              let body='';
              res.on('data',chunk=>body+=chunk);
              res.on('end',()=>resolve(JSON.parse(body)));
            });
            req.on('error',reject);
            req.write(data);
            req.end();
          });
        };
        
        const optimizeHTML=async()=>{
          const htmlPath=path.join(srcDir,'index.html');
          if(!fs.existsSync(htmlPath))return;
          
          const html=fs.readFileSync(htmlPath,'utf8');
          const jsFiles=fs.readdirSync(srcDir).filter(f=>f.endsWith('.js'));
          const jsContent=jsFiles.map(f=>fs.readFileSync(path.join(srcDir,f),'utf8')).join('\n');
          
          const prompt=\`Optimize this HTML/JS for CALS_EC XML processing. Requirements:
          - Pure JavaScript (no jQuery/Node.js)
          - Handle diverse XML files with redundancy
          - Minimize code size while maintaining performance
          - Split large JS files if needed
          - Preserve all functionality
          - Improve error handling
          - Enhance UI/UX
          
          HTML:\${html}
          JS:\${jsContent}
          
          Return optimized code with clear file separation.\`;
          
          const response=await callClaude(prompt);
          const optimizedCode=response.content[0].text;
          
          // Extract and save optimized files
          const htmlMatch=optimizedCode.match(/<html[^>]*>[\s\S]*<\/html>/i);
          const jsMatch=optimizedCode.match(/\/\/ main\.js[\s\S]*?(?=\/\/|$)/);
          
          if(htmlMatch){
            const minifiedHTML=await htmlMinify(htmlMatch[0],{
              collapseWhitespace:true,
              removeComments:true,
              minifyJS:true,
              minifyCSS:true
            });
            fs.writeFileSync(path.join(outDir,'index.html'),minifiedHTML);
          }
          
          if(jsMatch){
            const minifiedJS=await minify(jsMatch[0]);
            fs.writeFileSync(path.join(outDir,'main.js'),minifiedJS.code);
          }
          
          console.log('Optimization completed');
        };
        
        optimizeHTML().catch(console.error);
        "
    
    - name: Commit optimized files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add optimized/
        git diff --staged --quiet || git commit -m "Auto-optimize CALS_EC files [$(date)]"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cleanup old optimizations
      run: |
        find ./optimized -name "*.bak" -mtime +1 -delete
        find ./optimized -name "*.tmp" -mtime +1 -delete